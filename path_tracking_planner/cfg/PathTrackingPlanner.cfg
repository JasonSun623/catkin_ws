#!/usr/bin/env python

PACKAGE= 'path_tracking_planner'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, str_t, double_t, bool_t, int_t

gen = ParameterGenerator()

pid = gen.add_group("PID")
#       Name / Type/ Reconfiguration level /Description /Default  /Min  /Max
#    double dt , maxT , minT, Kp , Ki, Kd;
#    double dtS, maxS , minS, KpS, KiS, KdS;
pid.add("max_w",double_t,0,"max rotate speed",   pi,   0, pi)
pid.add("min_w",double_t,0,"min rotate speed",   -pi,-pi, pi)
pid.add("kp_w",double_t,0,"kp for rotate speed", 0.5,  0, 1000)
pid.add("ki_w",double_t,0,"ki for rotate speed", 0.5, 0, 1000)
pid.add("kd_w",double_t,0,"kd for rotate speed", 0.005,0, 1000)

pid.add("max_v",double_t,0,"max translate speed"  ,  1,     0, 2)
pid.add("min_v",double_t,0,"min translate speed"  ,  0,     0, 0.1)
pid.add("kp_v",double_t,0,"kp for translate speed",0.5,   0, 2)
pid.add("ki_v",double_t,0,"ki for translate speed",0.05,  0, 0.5)
pid.add("kd_v",double_t,0,"kd for translate speed",0.005, 0, 0.5)

trajectory_control = gen.add_group("TrajectoryControl")

trajectory_control.add("look_ahead_inc",double_t,0,"trajectory track inc dist",0.05,0.001,0.3)
trajectory_control.add("d_lookahear_min",double_t,0,"trajectory track min dist",0.3,0.05,1)
trajectory_control.add("d_lookahear_max",double_t,0,"trajectory track max dist",1.1,1,2)
trajectory_control.add("max_speed",double_t,0,"trajectory track max speed",1.2,1,2)
trajectory_control.add("desired_freq",double_t,0,"trajectory track frequency",50,10,100)

#package name ,XConfig.h name
#The last line simply tells the generator to generate the necessary files and exit the program.
#The second parameter is the name of a node this could run in (used to generate documentation only),
#the third parameter is a name prefix the generated files will get
#(e.g. "<name>Config.h" for c++, or "<name>Config.py" for python.

exit(gen.generate(PACKAGE,"path_tracking_planner","PathTrackingPlanner"))
