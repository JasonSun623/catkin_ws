<?xml version="1.0"?>
<launch>
  <arg name="run_front_laser_to_pcl" default="true"/>
  <arg name="run_rear_laser_to_pcl" default="false"/>
  <arg name="obstacle_avoidance" default="true"/>
  <arg name="front_scan" default="scan"/>
  <arg name="rear_scan" default="s3000_laser_back/scan"/>
  <arg name="global_frame" default="/map"/>
  <arg name="base_frame" default="base_footprint"/>
  <!-- frame used for reference in the obstacle detection -->
  <arg name="front_obstacle_frame" default="base_link"/>
  <arg name="rear_obstacle_frame" default="base_footprint"/>
  <arg name="cmd_vel" default="cmd_vel"/>

  <arg name="debug" default="false"/>
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />

  <!-- Uncomment to use the collision detection based on laserscan and pointclouds -->
  <node if="$(arg run_front_laser_to_pcl)" pkg="hector_laserscan_to_pointcloud" type="laserscan_to_pointcloud_node" name="scan_to_ptcld_front" respawn="true">
    <remap from="scan" to="$(arg front_scan)"/>
    <remap from="scan_cloud" to="scan_cloud_front"/>
    <param name="min_range" value="0.05"/>
    <param name="use_high_fidelity_projection" value="true"/>
    <param name="target_frame" value="$(arg front_obstacle_frame)"/>
    <rosparam command="load" file="$(find hector_laserscan_to_pointcloud)/config/default_scan_shadow_filter.yaml"/>
  </node>

  <node if="$(arg run_rear_laser_to_pcl)" pkg="hector_laserscan_to_pointcloud" type="laserscan_to_pointcloud_node" name="scan_to_ptcld_back" respawn="true">
    <remap from="scan" to="$(arg rear_scan)"/>
    <remap from="scan_cloud" to="scan_cloud_back"/>
    <param name="min_range" value="0.05" />
    <param name="use_high_fidelity_projection" value="true" />
    <param name="target_frame" value="$(arg obstacle_frame)" />
    <rosparam command="load" file="$(find hector_laserscan_to_pointcloud)/config/default_scan_shadow_filter.yaml" />
  </node>

  <node launch-prefix="$(arg launch_prefix)" pkg="path_tracking_planner" type="path_tracking_planner_node" name="path_tracking_planner" output="screen" >
	<!-- Options: MAP, ODOM -->	
    <param name="position_source" value="MAP" type="string"/>
    <param name="global_frame_id" value="$(arg global_frame)" type="string"/>
    <param name="base_frame_id" value="$(arg base_frame)" type="string"/>

    <param name="target_frame" value="/base_footprint" type="string"/>

    <param name="d_lookahear_min" value="0.3"/>
    <param name="d_lookahear_max" value="1.1"/>
    <param name="waypoint_pop_distance" value="0.30"/>

  	<param name="kr" value="0.2"/>
    <param name="desired_freq" value="50.0"/>

	<!--for Ackerman-->
    <param name="d_dist_wheel_to_center" value="1.0"/>
    <!-- type of velocity command (depending on odometry configuration): Ackermann, Twist -->
	<!--
    <param name="command_type" value="Ackermann"/>
    <param name="odom_topic" value="/agvs_robot_control/odom"/>
        <param name="cmd_topic_vel" value="/agvs_robot_control/command"/-->
    <param name="command_type" value="Twist"/>

    <!--param name="cmd_topic_vel" value="$(arg cmd_vel)"/-->

    <param name="obstacle_range" value="1.0"/>
    <param name="lateral_clearance" value="0.2"/>
    <param name="footprint_length" value="0.75"/>
    <param name="footprint_width" value="0.68"/>
    <param name="obstacle_avoidance" value="$(arg obstacle_avoidance)"/>
    <param name="static_lookahead" value="false"/>
    <param name="goal_tolerance" value="0.025"/>
    <!--param name="path_turn_radius_distance" value="0.20"/-->
    <!--remap from="cmd_vel" to="cmd_vel_mux/input/navi"/-->
    <!-- add for pid -->
    <param name="max_w" value="0.4" />
    <param name="min_w" value="-0.4" />

    <param name="odom_topic" value="/odom"/>
    <param name="cmd_topic_vel" value="cmd_vel"/>

    <remap from="path_tracking_planner/scan_cloud_front" to="scan_cloud_front"/>
	<remap from="path_tracking_planner/odom" to="/odom"/>
	<remap from="path_tracking_planner/cmd_vel" to="cmd_vel_mux/input/navi"/>
  </node>
</launch>
